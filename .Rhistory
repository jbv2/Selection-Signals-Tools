chrlabs = unique(ihs$CHR),
annotatePval = 0.0001, suggestiveline = 4, annotateTop = T)
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0)
manhattanplot(abs(wgscan.ihs), threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0)
View(wgscan.ihs)
wgscan.ihs[["ihs"]][["IHS"]]
abs(wgscan.ihs[["ihs"]][["IHS"]])
##Converting iHS to abs
wgscan.ihs[["ihs"]][["IHS"]] <- abs(wgscan.ihs[["ihs"]][["IHS"]])
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0)
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = abs(iHS))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)")
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)")
qq(wgscan.ihs.qqman$P)
qq(wgscan.ihs.qqman$P, lambda = T)
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)")
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0,4))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
expand = c(0,0))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0,0))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0,4))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(-0.5,4))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.5,4))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.1,4))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.2,4))
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15,4))
abs.ihs.pl <- manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15,4))
manhattanplot(wgscan.ihs, pval = T, cr = cr.mxb, cr.lab.cex = 0)
max(wgscan.ihs[["ihs"]][["IHS"]])
max.col(wgscan.ihs[["ihs"]][["IHS"]])
max(wgscan.ihs[["ihs"]][["IHS"]])
wgscan.ihs[["ihs"]][["IHS"]]
as.integer(wgscan.ihs[["ihs"]][["IHS"]])
as.numeric(wgscan.ihs[["ihs"]][["IHS"]])
max(as.numeric(wgscan.ihs[["ihs"]][["IHS"]]))
as.vector(wgscan.ihs[["ihs"]][["IHS"]])
max(as.vector(wgscan.ihs[["ihs"]][["IHS"]]))
max(as.vector.factor(wgscan.ihs[["ihs"]][["IHS"]]))
typeof(wgscan.ihs[["ihs"]][["IHS"]])
ymax <- wgscan.ihs[["ihs"]][["IHS"]]
ymax <- wgscan.ihs[["ihs"]][["IHS"]] %>% as.vector()
max(ymax)
ymax <- wgscan.ihs[["ihs"]][["IHS"]] %>% as.vector() %>%
is.na()
max(ymax, na.rm = T)
ymax <- wgscan.ihs[["ihs"]][["IHS"]] %>% as.vector() %>%
is.na()
max(ymax, na.rm = T)
ymax
max(ymax, na.rm = T)
max(wgscan.ihs[["ihs"]][["IHS"]], na.rm = T)
ymax <- max(wgscan.ihs[["ihs"]][["IHS"]], na.rm = T)
abs.ihs.pl <- manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15,ymax+.5))
abs.ihs.pl
abs.ihs.pl <- manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15,ymax+.5))
abs.ihs.pl
#abs.ihs.pl <-
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15,ymax+.5))
#abs.ihs.pl <-
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax+.5))
manhattanplot(wgscan.ihs, pval = T, cr = cr.mxb, cr.lab.cex = 0)
#abs.ihs.pl <-
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax+.5))
abs.ihs.pl <- manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax+.5))
abs.ihs.pl
print(abs.ihs.pl)
manhattanplot(wgscan.ihs, pval = T, cr = cr.mxb, cr.lab.cex = 0)
print(abs.ihs.pl)
print(abs.ihs.pl)
qqman::manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.0001,
suggestiveline = 4,
annotateTop = T)
qqman::manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.001,
suggestiveline = 4,
annotateTop = T)
manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.001,
suggestiveline = 4,
annotateTop = T)
qqman::manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.001,
suggestiveline = 4,
annotateTop = T)
qqman::manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.001,
suggestiveline = 4,
annotateTop = T)
manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.001,
suggestiveline = 4,
annotateTop = T)
prueba <- manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.001,
suggestiveline = 4,
annotateTop = T)
prueba
plot1 <- manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax+.5))
plot1
plot1
(plot1)print()
print(plot1)
plot1 <- recordPlot()
png()
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax+.5))
dev.off()
png(filename = "./mxb_ihs.png", width = 14, height = 10, units = "cm", res = 300)
manhattanplot(wgscan.ihs, threshold = c(2, -2), cr = cr.mxb, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax+.5))
dev.off()
png(filename = "./mxb_ihs_pval.png", width = 14, height = 10, units = "cm", res = 300)
manhattanplot(wgscan.ihs, pval = T, cr = cr.mxb, cr.lab.cex = 0)
dev.off()
png(filename = "./mxb_ihs_pval.png", width = 14, height = 10, units = "cm", res = 300)
manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.001,
suggestiveline = 4,
annotateTop = T)
dev.off()
manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.0001,
suggestiveline = 4,
annotateTop = T)
png(filename = "./mxb_ihs_pval.png", width = 14, height = 10, units = "cm", res = 300)
manhattan(wgscan.ihs.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.0001,
suggestiveline = 4,
annotateTop = T)
dev.off()
qq(wgscan.ihs.qqman$P, lambda = T)
qq(wgscan.ihs.qqman$P)
qq(wgscan.ihs.qqman$P)
library("GenABEL")
install.packages("GenABEL")
install.packages("QCEWAS")
library("QCEWAS")
P_lambda(wgscan.ihs.qqman$P)
lam =P_lambda(wgscan.ihs.qqman$P)
qq(wgscan.ihs.qqman$P, main = lam)
qq(wgscan.ihs.qqman$P, main = paste("lambda=",lam))
##Loading libraries
library(rehh)
library("vcfR") ## For reading VCFs
library("R.utils") ## For reading compressed VCFs
library("dplyr")
library(qqman)
library(RColorBrewer)
library("QCEWAS")
## demo code - no data files for all chromosomes provided
for(i in 21:22) {
# haplotype file name for each chromosome
hh <- data2haplohh(hap_file = paste("./test", i, ".vcf.gz", sep = ""),
polarize_vcf = FALSE,
vcf_reader = "data.table")
# perform scan on a single chromosome (calculate iHH values)
scan <- scan_hh(hh)
# concatenate chromosome-wise data frames to
# a data frame for the whole genome
# (more efficient ways certainly exist...)
if (i == 21) {
wgscan <- scan
} else {
wgscan <- rbind(wgscan, scan)
}
}
for(i in 21:22) {
# haplotype file name for each chromosome
hh <- data2haplohh(hap_file = paste("./test_1000g_",i, ".vcf.gz", sep = ""),
polarize_vcf = FALSE,
vcf_reader = "data.table", remove_multiple_markers = T)
# perform scan on a single chromosome (calculate iHH values)
scan <- scan_hh(hh)
# concatenate chromosome-wise data frames to
# a data frame for the whole genome
# (more efficient ways certainly exist...)
if (i == 21) {
wgscan_ingroup <- scan
} else {
wgscan_ingroup <- rbind(wgscan_ingroup, scan)
}
}
View(wgscan_ingroup)
# Calculate XP-EHH
xpehh.mxb_pel <- ies2xpehh(scan_pop1 =  wgscan,
scan_pop2 =  wgscan_ingroup,
popname1 = "MXB",
popname2 = "PEL", include_freq = T)
View(xpehh.mxb_pel)
# create new data frame
wgscan.xpehh.qqman <- data.frame(
CHR = as.integer(xpehh.mxb_pel$CHR),
# chromosomes as integers
BP = xpehh.mxb_pel$POSITION,         # base pairs
P = 10**(-xpehh.mxb_pel$LOGPVALUE),  # transform back to p-values
SNP = row.names(xpehh.mxb_pel)       # SNP names
)
wgscan.xpehh.qqman <- wgscan.xpehh.qqman %>%
filter(P != "NA")
if (!is.na(xpehh.mxb_pel$XPEHH_MXB_PEL)) {
qqman::manhattan(wgscan.xpehh.qqman,
col = c("red","green"),
chrlabs = unique(wgscan.xpehh.qqman$CHR),
annotatePval = 0.0001)
} else {print("No")
}
manhattanplot(xpehh.mxb_pel,
main = "xp-ehh (CGU cattle breed)")
if (!is.na(xpehh.mxb_pel$XPEHH_MXB_PEL)) {
qqman::manhattan(wgscan.xpehh.qqman,
col = c("red","green"),
chrlabs = unique(wgscan.xpehh.qqman$CHR),
annotatePval = 0.0001)
} else {print("No")
}
options(warn=0)
if (!is.na(xpehh.mxb_pel$XPEHH_MXB_PEL)) {
qqman::manhattan(wgscan.xpehh.qqman,
col = c("red","green"),
chrlabs = unique(wgscan.xpehh.qqman$CHR),
annotatePval = 0.0001)
} else {print("No")
}
options(warn=-1)
if (!is.na(xpehh.mxb_pel$XPEHH_MXB_PEL)) {
qqman::manhattan(wgscan.xpehh.qqman,
col = c("red","green"),
chrlabs = unique(wgscan.xpehh.qqman$CHR),
annotatePval = 0.0001)
} else {print("No")
}
manhattanplot(xpehh.mxb_pel,
main = "xp-ehh (CGU cattle breed)")
manhattanplot(xpehh.mxb_pel,
main = "xp-ehh (CGU cattle breed)")
manhattan(xpehh.mxb_pel, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.0001,
suggestiveline = 4,
annotateTop = T)
manhattan(wgscan.xpehh.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.0001,
suggestiveline = 4,
annotateTop = T)
if (!is.na(xpehh.mxb_pel$XPEHH_MXB_PEL)) {
manhattan(wgscan.xpehh.qqman, col = brewer.pal(name = "Set2", n = 8),
chrlabs = unique(ihs$CHR),
annotatePval = 0.0001,
suggestiveline = 4,
annotateTop = T)
} else {print("No")
}
manhattanplot(xpehh.mxb_pel, cr = cr.mxb, cr.lab.cex = 0, main = "xp-ehh (MXB)",
ylim = c(0.15, ymax+.5))
manhattanplot(xpehh.mxb_pel, main = "xp-ehh (MXB)",
ylim = c(0.15, ymax+.5))
manhattanplot(xpehh.mxb_pel, main = "xp-ehh (MXB)")
##Example for ihs and xp-ehh using test-data
##Judith Ballesteros
#------
use_mit_license(copyright_holder = NULL)
View(wgscan)
# calculate genome-wide iHS values
wgscan.ihs <- ihh2ihs(wgscan)
View(wgscan.ihs)
## Detecting outliers for iHS
cr.mxb_ihs <- calc_candidate_regions(wgscan.ihs,
threshold = 4,
pval = TRUE,
window_size = 1E6,
overlap = 1E5,
min_n_extr_mrk = 2)
##Converting iHS to abs
wgscan.ihs[["ihs"]][["IHS"]] <- abs(wgscan.ihs[["ihs"]][["IHS"]])
View(wgscan.ihs)
##Save results to tables
wgascan.ihs.ihs <- wgscan.ihs[["ihs"]]
View(wgascan.ihs.ihs)
wgscan.ihs.frequency_class <- wgascan.ihs[["frequency.class"]]
View(wgscan.ihs[["frequency.class"]])
wgscan.ihs.frequency_class <- wgscan.ihs[["frequency.class"]]
as.list(wgascan.ihs.ihs,wgscan.ihs.frequency_class)
prueba <- as.list(wgascan.ihs.ihs,wgscan.ihs.frequency_class)
View(prueba)
## Plot iHS values
palette(brewer.pal(name = "Set2", n = 8))
#
# png(filename = "./mxb_ihs.png", width = 14, height = 10, units = "cm", res = 300)
manhattanplot(wgascan.ihs.ihs, threshold = c(2, -2), cr = cr.mxb_ihs, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax_ihs+.5))
#
# png(filename = "./mxb_ihs.png", width = 14, height = 10, units = "cm", res = 300)
manhattanplot(wgascan.ihs.ihs, threshold = c(2, -2), cr = cr.mxb_ihs, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax+.5))
ymax_ihs <- max(wgscan.ihs[["ihs"]][["IHS"]], na.rm = T)
#
# png(filename = "./mxb_ihs.png", width = 14, height = 10, units = "cm", res = 300)
manhattanplot(wgascan.ihs.ihs, threshold = c(2, -2), cr = cr.mxb_ihs, cr.lab.cex = 0, ylab = "abs(iHS)", main = "iHS (MXB)",
ylim = c(0.15, ymax_ihs+.5))
##Loading libraries
library(rehh)
library("vcfR") ## For reading VCFs
library("R.utils") ## For reading compressed VCFs
library("dplyr")
library(qqman)
#library(RColorBrewer)
library("QCEWAS")
options(warn=-1)
args = commandArgs(trailingOnly=TRUE)
## Load args
## For debuggin only.
## Comment for running in mk
args[1] <- 21
args[2] <- 22
args[3] <- "./test"
args[4] <- ".vcf.gz"
## demo code - no data files for all chromosomes provided
for(i in 21:22) {
# haplotype file name for each chromosome
hh <- data2haplohh(hap_file = paste("./test", i, ".vcf.gz", sep = ""),
polarize_vcf = FALSE,
vcf_reader = "data.table")
# perform scan on a single chromosome (calculate iHH values)
scan <- scan_hh(hh)
# concatenate chromosome-wise data frames to
# a data frame for the whole genome
# (more efficient ways certainly exist...)
if (i == 21) {
wgscan <- scan
} else {
wgscan <- rbind(wgscan, scan)
}
}
# calculate genome-wide iHS values
wgscan.ihs <- ihh2ihs(wgscan)
## Detecting outliers for iHS
cr.mxb_ihs <- calc_candidate_regions(wgscan.ihs,
threshold = 4,
pval = TRUE,
window_size = 1E6,
overlap = 1E5,
min_n_extr_mrk = 2)
View(wgscan.ihs)
View(cr.mxb_ihs)
View(cr.mxb_ihs)
##Converting iHS to abs
wgscan.ihs[["ihs"]][["IHS"]] <- abs(wgscan.ihs[["ihs"]][["IHS"]])
##Save results to tables
wgascan.ihs.ihs <- wgscan.ihs[["ihs"]]
wgscan.ihs.frequency_class <- wgscan.ihs[["frequency.class"]]
ihs_table <- args[7]
## Reading VCFs and calculating EHH per chromosome in ingroup
for(i in 21:22) {
# haplotype file name for each chromosome
hh <- data2haplohh(hap_file = paste("./test_1000g_",i, ".vcf.gz", sep = ""),
polarize_vcf = FALSE,
vcf_reader = "data.table", remove_multiple_markers = T)
# perform scan on a single chromosome (calculate iHH values)
scan <- scan_hh(hh)
# concatenate chromosome-wise data frames to
# a data frame for the whole genome
# (more efficient ways certainly exist...)
if (i == 21) {
wgscan_ingroup <- scan
} else {
wgscan_ingroup <- rbind(wgscan_ingroup, scan)
}
}
# Calculate XP-EHH
xpehh.mxb_pel <- ies2xpehh(scan_pop1 =  wgscan,
scan_pop2 =  wgscan_ingroup,
popname1 = "MXB",
popname2 = "PEL", include_freq = T)
View(xpehh.mxb_pel)
# Calculate XP-EHH
xpehh.mxb_pel <- ies2xpehh(scan_pop1 =  wgscan,
scan_pop2 =  wgscan_ingroup,
popname1 = "MXB",
popname2 = "PEL", include_freq = F)
wgscan.ihs[["ihs"]]
View(wgascan.ihs.ihs)
library(rehh)
library("vcfR") ## For reading VCFs
library("R.utils") ## For reading compressed VCFs
make.example.files()
## Code for calculating iHS in a single chromosome
hh <-                  # data input
data2haplohh(
hap_file = "bta12_cgu.hap",
map_file = "map.inp",
chr.name = "12",
allele_coding = "map"
)
scan <- scan_hh(hh)    # calculation of EHH and integration
# (combine results from different chromosomes)
ihs <- ihh2ihs(scan)   # log ratio for alleles and standardization
manhattanplot(ihs)     # plot of the statistics
## Example for reading a VCF
hh <- data2haplohh(hap_file = "bta12_cgu.vcf.gz",
polarize_vcf = FALSE,
vcf_reader = "data.table")
## Code for calculating xp-ehh
library(rehh.data)
data(wgscan.cgu) ; data(wgscan.eut)
## results from a genome scan (44,057 SNPs) see ?wgscan.eut and ?wgscan.cgu for details
xpehh.cgu_eut <- ies2xpehh(scan_pop1 =  wgscan.cgu,
scan_pop2 =  wgscan.eut,
popname1 = "CGU",
popname2 = "EUT")
## Detecting outliers for xp-ehh
cr.cgu <- calc_candidate_regions(xpehh.cgu_eut,
threshold = 4,
pval = TRUE,
window_size = 1E6,
overlap = 1E5,
min_n_extr_mrk = 2)
cr.cgu
## Detecting outliers for XP-EHH
cr.mxb_xp_ehh <- calc_candidate_regions(xpehh.mxb_pel,
threshold = 4,
pval = TRUE,
window_size = 1E6,
overlap = 1E5,
min_n_extr_mrk = 2)
View(cr.mxb_xp_ehh)
## Load args
## For debuggin only.
## Comment for running in mk
args[1] <- 21
args[2] <- 22
args[3] <- "./test"
args[4] <- ".vcf.gz"
args[5] <- "MXB"
args[6] <- "PEL"
args[7] <- "./test.ihs.png"
##Assign args
first_chrom <- args[1]
last_chrom <- args[2]
stem <- args[3]
end_file <- args[4]
first_pop <- args[5]
second_pop <- args[6]
ihs_table <- args[7]
outliers_ihs <- gsub(ihs_table,
pattern = ".ihs.tsv",
replacement = ".ihs_outliers.tsv")
ihs_qqman_table <- gsub(ihs_table,
pattern = ".ihs.tsv",
replacement = ".ihs_qqman.tsv")
xp_ehh <- gsub(ihs_table,
pattern = ".ihs.tsv",
replacement = ".xp_ehh.tsv")
outliers_xp_ehh <- gsub(ihs_table,
pattern = ".ihs.tsv",
replacement = ".xp_ehh_outliers.tsv")
xp_ehh_qqman_table <- gsub(ihs_table,
pattern = ".ihs.tsv",
replacement = ".xp_ehh_qqman.tsv")
##Assign args
first_chrom <- args[1]
## Reading VCFs and calculating EHH per chromosome in first population
for(i in first_chrom:last_chrom) {
# haplotype file name for each chromosome
hh <- data2haplohh(hap_file = paste("./test", i, ".vcf.gz", sep = ""),
polarize_vcf = FALSE,
vcf_reader = "data.table")
# perform scan on a single chromosome (calculate iHH values)
scan <- scan_hh(hh)
# concatenate chromosome-wise data frames to
# a data frame for the whole genome
# (more efficient ways certainly exist...)
if (i == 21) {
wgscan <- scan
} else {
wgscan <- rbind(wgscan, scan)
}
}
stem_ingroup <- args[8]
args[8] <- "./test_1000g_"
stem_ingroup <- args[8]
source("~/Documents/Ongoing_projects/master/selection_signals/mine_xp_ehh/mxb_selection.R", echo=TRUE)
source("~/Documents/Ongoing_projects/master/selection_signals/mine_xp_ehh/mxb_selection.R", echo=TRUE)
View(ihs)
View(xpehh.mxb_pel)
